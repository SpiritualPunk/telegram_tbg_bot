

import os
import sqlite3
import asyncio
from datetime import datetime, timedelta
from pyrogram import Client, filters, idle
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# üîê –í–°–¢–ê–í–¨ –°–í–û–ò –î–ê–ù–ù–´–ï
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")

# üóÇÔ∏è –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å ‚Äî –≤–∞–∂–Ω–æ –¥–ª—è PythonAnywhere)
DB_PATH = os.path.join(os.path.dirname(__file__), "users.db")

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
app = Client("my_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)
scheduler = AsyncIOScheduler()

# üìÅ –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            first_name TEXT,
            username TEXT,
            registered_at TEXT
        )
    """)
    conn.commit()
    conn.close()

def save_user(user):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO users (user_id, first_name, username, registered_at) VALUES (?, ?, ?, ?)", (
        user.id,
        user.first_name,
        user.username,
        datetime.now().isoformat()
    ))
    conn.commit()
    conn.close()

# ‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_course_step(user_id):
    try:
        await app.send_message(
            user_id,
            "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è –ü–µ—Ä–≤—ã–π —à–∞–≥ –æ—á–∏—â–∞—é—â–µ–≥–æ –∫—É—Ä—Å–∞:\n\nüçã –í—ã–ø–µ–π —Å—Ç–∞–∫–∞–Ω —Ç—ë–ø–ª–æ–π –≤–æ–¥—ã —Å –ª–∏–º–æ–Ω–æ–º."
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def schedule_message(user_id):
    test_time = datetime.now() + timedelta(minutes=1)  # —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—É

    scheduler.add_job(
        send_course_step,
        "date",
        run_date=test_time,
        args=[user_id],
        id=f"test_course_step_{user_id}",
        replace_existing=True
    )

# üì¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
@app.on_message(filters.command("start"))
async def start_handler(client, message):
    user = message.from_user
    save_user(user)
    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏-–∫—É—Ä—Å –ø–æ –æ—á–∏—â–µ–Ω–∏—é. –ú—ã –Ω–∞—á–Ω—ë–º –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º üåû"
    )
    schedule_message(user.id)

# üß† –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π main
async def main():
    init_db()
    scheduler.start()
    print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    await app.start()
    await idle()
    await app.stop()

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())

