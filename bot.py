import os
import sqlite3
import asyncio
from datetime import datetime, timedelta
from pyrogram import Client, filters, idle
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ—Ç Railway
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")

print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

# üß† –ü—É—Ç—å –∫ –±–∞–∑–µ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞)
DB_PATH = os.path.join(os.path.dirname(__file__), "users.db")

# ü§ñ –ë–æ—Ç –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
app = Client("my_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)
scheduler = AsyncIOScheduler()

# üìÅ –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π
def init_db():
    print("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            first_name TEXT,
            username TEXT,
            registered_at TEXT
        )
    """)
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞.")

def save_user(user):
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}")
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO users (user_id, first_name, username, registered_at) VALUES (?, ?, ?, ?)", (
        user.id,
        user.first_name,
        user.username,
        datetime.now().isoformat()
    ))
    conn.commit()
    conn.close()

# ‚è∞ –ó–∞–¥–∞—á–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
async def send_course_step(user_id):
    print(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    try:
        await app.send_message(
            user_id,
            "‚úÖ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Railway –±–æ—Ç–∞. –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç! ü•≥"
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def schedule_message(user_id):
    run_time = datetime.now() + timedelta(minutes=1)
    print(f"üïí –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user_id} –Ω–∞ {run_time}")
    scheduler.add_job(
        send_course_step,
        "date",
        run_date=run_time,
        args=[user_id],
        id=f"course_step_{user_id}",
        replace_existing=True
    )

# üì¨ –ö–æ–º–∞–Ω–¥–∞ /start
@app.on_message(filters.command("start"))
async def start_handler(client, message):
    user = message.from_user
    print(f"üì• –ü–æ–ª—É—á–µ–Ω /start –æ—Ç {user.id}")
    save_user(user)
    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n–¢—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏. –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É ‚è±"
    )
    schedule_message(user.id)

# üß† –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
async def main():
    init_db()
    scheduler.start()
    print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    await app.start()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
    await idle()
    await app.stop()

# ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç
if __name__ == "__main__":
    asyncio.run(main())
